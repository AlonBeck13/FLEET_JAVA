package il.ac.tau.cs.sw1.ex9.starfleet;


import java.util.*;


public class StarfleetManager {

	/**
	 * Returns a list containing string representation of all fleet ships, sorted in descending order by
	 * fire power, and then in descending order by commission year, and finally in ascending order by
	 * name
	 */
	public static List<String> getShipDescriptionsSortedByFirePowerAndCommissionYear (Collection<Spaceship> fleet) {
		List<String> answer = new ArrayList<>();
		List<Spaceship> curr = new ArrayList<>();
		for (Spaceship a: fleet){
			curr.add(a);
		}
		Comparator<Spaceship> comp1 = new myshipcomp();
		curr.sort(comp1);
		for (Spaceship b: curr){
			answer.add(b.toString());
		}
		return answer;
	}

	/**
	 * Returns a map containing ship type names as keys (the class name) and the number of instances created for each type as values
	 */
	public static Map<String, Integer> getInstanceNumberPerClass(Collection<Spaceship> fleet) {
		Map<String, Integer> answer = new HashMap<>();
		for (Spaceship a: fleet){
			String curr = a.getClass().getSimpleName();
			if (answer.containsKey(curr) == false){
				answer.put(curr, 1);
			}
			else{
				answer.put(curr, answer.get(curr)+1);
			}
		}
		return answer;
	}


	/**
	 * Returns the total annual maintenance cost of the fleet (which is the sum of maintenance costs of all the fleet's ships)
	 */
	public static int getTotalMaintenanceCost (Collection<Spaceship> fleet) {
		int answer = 0;
		for (Spaceship a: fleet){
			answer += a.getAnnualMaintenanceCost();
		}
		return  answer;
	}


	/**
	 * Returns a set containing the names of all the fleet's weapons installed on any ship
	 */
	public static Set<String> getFleetWeaponNames(Collection<Spaceship> fleet) {
		Set<String> answer = new TreeSet<>();
		for (Spaceship a: fleet){
			if (a.getClass().getSimpleName().equals("TransportShip") == false){
				myabstrackwarship curr = (myabstrackwarship) (a);
				List<Weapon> weapons = curr.getWeapon();
				for(Weapon b: weapons){
					answer.add(b.getName());
				}
			}
		}
		return answer;
	}

	/*
	 * Returns the total number of crew-members serving on board of the given fleet's ships.
	 */
	public static int getTotalNumberOfFleetCrewMembers(Collection<Spaceship> fleet) {
		int answer = 0;
		for(Spaceship a: fleet){
			answer += a.getCrewMembers().size();
		}
		return answer;
	}

	/*
	 * Returns the average age of all officers serving on board of the given fleet's ships. 
	 */
	public static float getAverageAgeOfFleetOfficers(Collection<Spaceship> fleet) {
		float numofofficers = 0;
		float agessum = 0;
		for (Spaceship a: fleet){
			Set<? extends CrewMember> curr = a.getCrewMembers();
			for (CrewMember b: curr){
				if (b.getClass().getSimpleName().equals("Officer") == true){
					numofofficers += 1;
					agessum += b.getAge();
				}
			}
		}
		return (agessum/numofofficers);
	}

	/*
	 * Returns a map mapping the highest ranking officer on each ship (as keys), to his ship (as values).
	 */
	public static Map<Officer, Spaceship> getHighestRankingOfficerPerShip(Collection<Spaceship> fleet) {
		Map<Officer, Spaceship> answer = new HashMap<>();
		for (Spaceship a: fleet){
			int isthereone = 0;
			Officer highest = null;
			Set<? extends CrewMember> curr = a.getCrewMembers();
			for (CrewMember b: curr){
				if (b.getClass().getSimpleName().equals("Officer") == true) {
					Officer curr1 = (Officer) (b);
					if (isthereone == 0) {
						highest = (Officer) (b);
						isthereone++;
					}
					else {
						if (curr1.getRank().compareTo(highest.getRank()) > 0) {
							highest = (Officer) (b);
						}
					}
				}
			}
			if (isthereone != 0){
				answer.put(highest, a);
			}
		}
		return answer;
	}

	/*
	 * Returns a List of entries representing ranks and their occurrences.
	 * Each entry represents a pair composed of an officer rank, and the number of its occurrences among starfleet personnel.
	 * The returned list is sorted ascendingly based on the number of occurrences.
	 */
	public static List<Map.Entry<OfficerRank, Integer>> getOfficerRanksSortedByPopularity(Collection<Spaceship> fleet) {
		List<Map.Entry<OfficerRank, Integer>> answer = new ArrayList<>();
		Map<OfficerRank, Integer> helpmap = new HashMap<>();
		for (Spaceship a: fleet){
			Set<? extends CrewMember> curr = a.getCrewMembers();
			for (CrewMember b: curr){
				if(b.getClass().getSimpleName().equals("Officer") == true){
					Officer currofficer = (Officer) b;
					OfficerRank curr2 = currofficer.getRank();
					if (!helpmap.containsKey(curr2)){
						helpmap.put(curr2, 1);
					}
					else{
						helpmap.put(curr2, helpmap.get(curr2)+1);
					}
				}
			}
		}
		for (Map.Entry<OfficerRank, Integer> entry: helpmap.entrySet()){
			answer.add(entry);
		}
		answer.sort(new Comparator<Map.Entry<OfficerRank, Integer>>() {
			@Override
			public int compare(Map.Entry<OfficerRank, Integer> o1, Map.Entry<OfficerRank, Integer> o2) {
				if (o1.getValue()>o2.getValue()){
					return 1;
				}
				else if(o1.getValue()<o2.getValue()){
					return -1;
				}
				return o1.getKey().compareTo(o2.getKey());
			}
		});
		return answer;
	}

}
